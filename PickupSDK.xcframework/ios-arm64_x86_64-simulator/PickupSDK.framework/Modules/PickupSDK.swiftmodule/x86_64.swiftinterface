// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PickupSDK
import Alamofire
import CoreLocation
import CryptoSwift
import Foundation
import MapKit
@_exported import PickupSDK
import Security
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers public class MetaManager : ObjectiveC.NSObject {
  public static var data: PickupSDK.PickupMetaResModel?
  public typealias MetaCompletion = (PickupSDK.PickupMetaResModel?, Swift.Error?) -> ()
  public static func getMeta(completion: @escaping PickupSDK.MetaManager.MetaCompletion)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NetworkConstants : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PickupCustomerResModel : ObjectiveC.NSObject, Swift.Codable {
  public var contactNumber: Swift.Int?
  public var customerId: Swift.Int?
  public var email: Swift.String?
  public var externalReference: Swift.String?
  public var firstName: Swift.String?
  public var lastName: Swift.String?
  public var loyaltyScheme: Swift.String?
  public var membershipNumber: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PickupResModel : ObjectiveC.NSObject, Swift.Codable {
  public var arrivalGeofence: [PickupSDK.PickupArrivalGeofenceResModel]?
  public var lng: Swift.String?
  public var arrivalInformationPrompt: Swift.String?
  public var arrivalRadius: Swift.Int?
  public var distanceUnit: Swift.String?
  public var handoffModeCurbside: Swift.Bool?
  public var handoffModeDrivethru: Swift.Bool?
  public var handoffModePickup: Swift.Bool?
  public var nearbyMinutes: Swift.Int?
  public var trackingTime: Swift.Int?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NetworkManager : ObjectiveC.NSObject {
  public static func send(request: Alamofire.URLRequestConvertible?, completion: @escaping (Alamofire.AFDataResponse<Any>?, Swift.AnyObject?, Swift.Bool) -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PUHTTPMethod : Swift.Int {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RequestManager : ObjectiveC.NSObject, Alamofire.URLRequestConvertible {
  public init?(uri: Swift.String, method: PickupSDK.PUHTTPMethod = .get, params: Alamofire.Parameters? = nil, httpHeaders: [Swift.String : Swift.String]? = nil)
  public func asURLRequest() -> Foundation.URLRequest
  @objc deinit
}
extension String {
  public var trim: Swift.String {
    get
  }
  public var trimNewLines: Swift.String {
    get
  }
  public func trimChars(fromSet str: Swift.String) -> Swift.String
  public var toURL: Foundation.URL? {
    get
  }
  public var toArray: [Swift.String] {
    get
  }
  public var toArrayUInt8: [Swift.UInt8] {
    get
  }
  public var toData: Foundation.Data? {
    get
  }
  public var toDictionary: [Swift.String : Swift.AnyObject]? {
    get
  }
  public var isValidEmail: Swift.Bool {
    get
  }
  public func contains(string: Swift.String?, caseSensitive: Swift.Bool = false) -> Swift.Bool
  public func removeChar(first: Swift.Bool = true, last: Swift.Bool = true) -> Swift.String
  public func index(from: Swift.Int) -> Swift.String.Index
  public func substring(from: Swift.Int) -> Swift.String
  public func substring(to: Swift.Int) -> Swift.String
  public func substring(with r: Swift.Range<Swift.Int>) -> Swift.String
  public var floatValue: Swift.Float {
    get
  }
}
@objc public class PickupNotificationResModel : ObjectiveC.NSObject, Swift.Codable {
  public var createdAt: Swift.String?
  public var createdAtDate: Foundation.Date?
  public var externalOrderId: Swift.String?
  public var id: Swift.Int?
  public var kind: Swift.String?
  public var message: Swift.String?
  public var readAt: Swift.String?
  public var userSurveyId: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OrderManager : ObjectiveC.NSObject {
  public typealias CreateOrderCompletion = (PickupSDK.PickupOrderResModel?, Swift.Error?) -> ()
  public typealias getOrderListCompletion = ([PickupSDK.PickupOrderResModel]?, Swift.Error?) -> ()
  @objc public static func create(params: [Swift.String : Any], completion: @escaping PickupSDK.OrderManager.CreateOrderCompletion)
  @objc override dynamic public init()
  @objc deinit
}
extension OrderManager {
  @objc public static func getActiveOrderList(completion: @escaping PickupSDK.OrderManager.getOrderListCompletion)
  @objc public static func getOrderDetail(orderId: Swift.String?, completion: @escaping PickupSDK.OrderManager.CreateOrderCompletion)
}
extension OrderManager {
  @objc public static func claimWebOrder(claimToken: Swift.String, completion: @escaping PickupSDK.OrderManager.CreateOrderCompletion)
  public static func getClaimParams(claimToken: Swift.String) -> Alamofire.Parameters
}
@objc open class PickupLocationResModel : ObjectiveC.NSObject, Swift.Codable {
  open var address: Swift.String?
  open var brand: Swift.String?
  open var checkinEvidencedBy: Swift.String?
  open var city: Swift.String?
  open var country: Swift.String?
  open var guestIdentityCodeType: Swift.String?
  open var latitude: Swift.String?
  open var locationId: Swift.Double?
  open var longitude: Swift.String?
  open var name: Swift.String?
  open var phoneNumber: Swift.String?
  open var postCode: Swift.String?
  open var state: Swift.String?
  open var storeNumber: Swift.String?
  open var storeTags: Swift.String?
  open var timeZone: Swift.String?
  open var updatedAt: Swift.String?
  open var onlineOrderUrl: Swift.String?
  public var pickup: PickupSDK.PickupResModel?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PickupOrderStatusResModel : ObjectiveC.NSObject, Swift.Codable {
  public var label: Swift.String?
  public var status: Swift.String?
  public var time: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PickupCustomerStatusResModel : ObjectiveC.NSObject, Swift.Codable {
  public var arrivalTime: Swift.String?
  public var createdAt: Swift.String?
  public var distance: Swift.String?
  public var lat: Swift.String?
  public var locationService: Swift.Int?
  public var status: Swift.String?
  public var long: Swift.String?
  public var updatedAt: Swift.String?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc open class PickupMetaResModel : ObjectiveC.NSObject, Swift.Codable {
  open var allowRatingInFeedback: Swift.Bool
  open var beaconUUID: Swift.String?
  open var iosGeocodeApiKey: Swift.String?
  open var businessId: Swift.Int?
  open var businessName: Swift.String?
  open var cardRedemptionValue: Swift.Int?
  open var checkinEvidencedBy: Swift.String?
  open var checkinsEarn: Swift.String?
  open var contentLanguage: Swift.String?
  open var currencyEarned: Swift.Int?
  open var defaultMapSearchRadius: Swift.Int?
  open var earningUnit: Swift.String?
  open var facebookPage: Swift.String?
  open var facebookSignupIncentiveText: Swift.String?
  open var faqUrl: Swift.String?
  open var giftCardMinimumTransactionAmount: Swift.Int?
  open var giftCardsEnabled: Swift.Bool
  open var guestIdentityCodeType: Swift.String?
  open var instagramPageUrl: Swift.String?
  open var iosGACode: Swift.String?
  open var locations: [PickupSDK.PickupLocationResModel]?
  open var marketingImageUrl: Swift.String?
  open var marketingInfo: Swift.String?
  open var marketingMessage: Swift.String?
  open var marketingTitle: Swift.String?
  open var maximumRatingInFeedback: Swift.Int?
  open var menusUrl: Swift.String?
  open var minimumVisitAmount: Swift.Int?
  open var minimumVisitHours: Swift.Int?
  open var misc1: Swift.String?
  open var misc2: Swift.String?
  open var misc3: Swift.String?
  open var misc4: Swift.String?
  open var shareInviteCodeMessage: Swift.String?
  open var shareInviteCodeTitle: Swift.String?
  open var shareInviteCodeDescription: Swift.String?
  open var socialCauseCampaignsEnabled: Swift.Bool
  open var orderNowUrl: Swift.String?
  open var pointsConversionThreshold: Swift.Int?
  open var privacyUrl: Swift.String?
  open var promotionalCouponsEnabled: Swift.Bool
  open var redemptionExpiryMinutes: Swift.Int?
  open var requirePasscodeForGiftCard: Swift.Bool
  open var supportEmailAddress: Swift.String?
  open var termsAndConditionsUrl: Swift.String?
  open var twitterHandle: Swift.String?
  open var uberClientId: Swift.String?
  open var visitsPerCard: Swift.Int?
  open var upgradeDisclaimer: Swift.String?
  open var earningDisclaimer: Swift.String?
  open var gameDisclaimer: Swift.String?
  open var challengesDisclaimer: Swift.String?
  open var appDisclaimer: Swift.String?
  open var orderUrlForSso: Swift.String?
  open var nutritionUrl: Swift.String?
  open var careersUrl: Swift.String?
  open var minimumAgeToSignup: Swift.Int?
  open var emailVerificationEnabled: Swift.Bool
  open var earningDescription: Swift.String?
  open var oloProviderKey: Swift.String?
  open var maxGiftCardBalance: Swift.Int?
  open var facebookSharing: Swift.Bool
  open var cateringUrl: Swift.String?
  open var oloApiKeyIos: Swift.String?
  open var oloBaseUrl: Swift.String?
  open var oloGroupOrderInviteUrl: Swift.String?
  open var gamesRulesUrl: Swift.String?
  open var migrationAllowed: Swift.Bool
  open var decreaseBadgeCountWhenOfferRead: Swift.Bool
  open var pickupPusherAppKey: Swift.String?
  open var pickupPusherCluster: Swift.String?
  public enum PUProgramType : Swift.Int {
    case pointBased
    case visitBased
    case pointVisitBased
    case invalid
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  open var programType: PickupSDK.PickupMetaResModel.PUProgramType {
    get
  }
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PickupOrderResModel : ObjectiveC.NSObject, Swift.Codable {
  public var channelName: Swift.String?
  public var claimedUserId: Swift.String?
  public var contextualArrivalInfo: Swift.String?
  public var customer: PickupSDK.PickupCustomerResModel?
  public var customerStatus: PickupSDK.PickupCustomerStatusResModel?
  public var externalUuid: Swift.String?
  public var handoffMode: Swift.String?
  public var items: Swift.String?
  public var loyaltyGuest: Swift.Int?
  public var orderId: Swift.String?
  public var orderStatus: PickupSDK.PickupOrderStatusResModel?
  public var punchhOrderId: Swift.String?
  public var readyTime: Swift.String?
  public var storeNumber: Swift.String?
  public var userId: Swift.Int?
  public var userName: Swift.String?
  public var vehicleDetails: Swift.String?
  public var readyDate: Foundation.Date?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class RequestHeader : ObjectiveC.NSObject {
  public static let kDeviceID: Swift.String
  public static let kDeviceMake: Swift.String
  public static let kAcceptLanguage: Swift.String
  public static let kAcceptTimezone: Swift.String
  public static let kOSVersion: Swift.String
  public static let kXPchDigest: Swift.String
  public static let kUserAuth: Swift.String
  public static var acceptLanguage: Swift.String {
    get
  }
  public static var acceptTimeZone: Swift.String {
    get
  }
  public static var osVersion: Swift.String {
    get
  }
  public static var defaultHeaders: [Swift.String : Swift.String] {
    get
  }
  public static func signedHeaders(body: Swift.String, addHeaders: [Swift.String : Swift.String]? = nil) -> [Swift.String : Swift.String]
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Storage {
  @objc deinit
}
extension Data {
  public var toString: Swift.String? {
    get
  }
  public var toArrayUInt8: [Swift.UInt8] {
    get
  }
}
extension URL {
  public var URI: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PickupConfiguration : ObjectiveC.NSObject {
  @objc public static var delegate: PickupSDK.LocationStatusManagerDelegate?
  public static func punchhURL(uri: Swift.String) -> Foundation.URL
  public static func punchhURLString(uri: Swift.String) -> Swift.String
  @objc public static func initialise(client: Swift.String, secret: Swift.String, isProd prod: Swift.Bool)
  @objc public static func setPunchhUserAccessToken(token: Swift.String)
  @objc public static func getAccessToken() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public func + <K, V>(left: [K : V]?, right: [K : V]?) -> [K : V]? where K : Swift.Hashable
@objc public protocol LocationStatusManagerDelegate {
  @objc func didUpdateUserStatus(_ data: PickupSDK.PickupOrderResModel?)
  @objc func didFailToUpdateUserStatus(_ error: Swift.Error?)
}
@objc @_inheritsConvenienceInitializers public class LocationStatusManager : ObjectiveC.NSObject {
  public typealias LocationStatusCompletion = (PickupSDK.PickupOrderResModel?, Swift.Error?) -> ()
  @objc public static func updateUserStatus(params: [Swift.String : Any], orderId: Swift.String, completion: @escaping PickupSDK.LocationStatusManager.LocationStatusCompletion)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NotificationManager : ObjectiveC.NSObject {
  public typealias NotificationCompletion = (PickupSDK.PickupNotificationResModel?, Swift.Error?) -> ()
  @objc public static func getNotifications(orderId: Swift.String, completion: @escaping PickupSDK.NotificationManager.NotificationCompletion)
  @objc override dynamic public init()
  @objc deinit
}
@objc public class PickupArrivalGeofenceResModel : ObjectiveC.NSObject, Swift.Codable {
  public var lat: Swift.Double?
  public var lng: Swift.Double?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc override dynamic public init()
  @objc deinit
}
extension PickupSDK.PUHTTPMethod : Swift.Equatable {}
extension PickupSDK.PUHTTPMethod : Swift.Hashable {}
extension PickupSDK.PUHTTPMethod : Swift.RawRepresentable {}
extension PickupSDK.PickupMetaResModel.PUProgramType : Swift.Equatable {}
extension PickupSDK.PickupMetaResModel.PUProgramType : Swift.Hashable {}
extension PickupSDK.PickupMetaResModel.PUProgramType : Swift.RawRepresentable {}
